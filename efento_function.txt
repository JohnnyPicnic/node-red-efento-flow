var value
var metadata
var start_point
var channelNumber
var measurement_record = [];
var channels_record = [];
var changeAt = []
var measurementPeriod = msg.payload.measurement_period_base * msg.payload.measurement_period_factor;
var transfer_reason = msg.payload.transfer_reason
var channelNumberForAcc = 0


for (var param of msg.payload.channels) {
    if (Object.keys(param).length) {
        if (param.type === 'MEASUREMENT_TYPE_OK_ALARM') {
            var numberOfMeasurements = (1 + (Math.abs(param.sample_offsets[param.sample_offsets.length - 1]) - 1) / measurementPeriod);
            for (let sampleOffset of param.sample_offsets) {
                let timeDifference = measurementPeriod * parseInt(Math.floor(Math.abs(sampleOffset - 1) / measurementPeriod));
                if (sampleOffset > 0) {
                    changeAt.push(String(param.timestamp + timeDifference), "1");
                    value = "1"
                } else if (sampleOffset < 1) {
                    changeAt.push(String(param.timestamp + timeDifference), "0")
                    value = "0"
                }
            }
            for (let measurementNumber = 0; measurementNumber < numberOfMeasurements; measurementNumber++) {
                let timeDifference = measurementPeriod * measurementNumber;
                let measurementtime = String(param.timestamp + timeDifference)
                if (changeAt.includes(measurementtime)) {
                    value = changeAt[changeAt.indexOf(measurementtime) + 1];
                }
                measurement_record.push(
                    {
                        measured_at: param.timestamp + timeDifference,
                        serial_number: Buffer.from(msg.payload.serial_num, 'base64').toString('hex').toUpperCase(),
                        battery_ok: msg.payload.battery_status,
                        type: param.type.replace("MEASUREMENT_TYPE_", ""),
                        value
                    }
                );
            }
        }
        else if (['MEASUREMENT_TYPE_PULSE_CNT_ACC_MAJOR', 'MEASUREMENT_TYPE_WATER_METER_ACC_MAJOR', 'MEASUREMENT_TYPE_ELEC_METER_ACC_MAJOR'].indexOf(param.type) >= 0) {
            var majorValues = []
            var calibrationRequired = []
            for (let index = 0; index < param.sample_offsets.length; index++) {
                if (["MEASUREMENT_TYPE_PULSE_CNT_ACC_MAJOR", "MEASUREMENT_TYPE_WATER_METER_ACC_MAJOR"].indexOf(param.type) >= 0) {
                    if (typeof param.start_point === 'undefined') {
                        start_point = 0
                    }
                    else {
                        start_point = param.start_point
                    }
                    metadata = ((start_point + param.sample_offsets[index]) % 4)
                    value = Math.floor(((start_point - metadata + param.sample_offsets[index]) / 4) * 1000)
                }
                else {
                    metadata = ((start_point + param.sample_offsets[index]) % 4)
                    value = Math.floor(((start_point - metadata + param.sample_offsets[index]) / 4) * 100)

                }
                if (metadata != 0) {
                    calibrationRequired.push(true)
                }
                else {
                    calibrationRequired.push(false)
                }
                majorValues.push(value)
            }
        }

        else if (["MEASUREMENT_TYPE_PULSE_CNT_ACC_MINOR", "MEASUREMENT_TYPE_WATER_METER_ACC_MINOR", "MEASUREMENT_TYPE_ELEC_METER_ACC_MINOR"].indexOf(param.type) >= 0) {
            channelNumberForAcc = channelNumberForAcc + 1

            for (let index = 0; index < param.sample_offsets.length; index++) {

                if (typeof param.start_point === 'undefined') {
                    start_point = 0
                }
                else {
                    start_point = param.start_point
                }

                if (calibrationRequired[index]) {

                    value = (majorValues[index] + Math.floor(
                        //dividing by 1000 to get mills of rain
                        (start_point + param.sample_offsets[index]) / 6)) / 1000
                    var calibration = true
                }
                else {
                    //dividing by 1000 to get mills of rain
                    value = (majorValues[index] + (start_point + param.sample_offsets[index]) / 6) / 1000

                }
                var timeDifference = measurementPeriod * index
                var measured_at = param.timestamp + timeDifference
                var type = param.type.replace("MEASUREMENT_TYPE_", "").replace("_MINOR", "") + "_" + channelNumberForAcc
                channels_record.push(
                    {
                        measured_at,
                        serial_number: Buffer.from(msg.payload.serial_num, 'base64').toString('hex').toUpperCase(),
                        battery_ok: msg.payload.battery_status,
                        transfer_reason,
                        metadata,
                        type,
                        value,
                    }
                );   
            }
        }
        else if (["MEASUREMENT_TYPE_VOLTAGE", "MEASUREMENT_TYPE_CURRENT"].indexOf(param.type) >= 0) {
            channelNumberForAcc = channelNumberForAcc + 1
            for (let index = 0; index < param.sample_offsets.length; index++) {
                if (typeof param.start_point === 'undefined') {
                    start_point = 0
                }
                else {
                    start_point = param.start_point
                }
                value = start_point + param.sample_offsets[index];
                
                var timeDifference = measurementPeriod * index
                var measured_at = param.timestamp + timeDifference
                var type = param.type.replace("MEASUREMENT_TYPE_", "") + "_" + channelNumberForAcc

                channels_record.push(
                    {
                        measured_at,
                        serial_number: Buffer.from(msg.payload.serial_num, 'base64').toString('hex').toUpperCase(),
                        battery_ok: msg.payload.battery_status,
                        transfer_reason,
                        type,
                        value,
                    }
                );
            }
        }
        else {
            for (let index = 0; index < param.sample_offsets.length; index++) {
                if (typeof param.start_point === 'undefined') {
                    start_point = 0
                }
                else {
                    start_point = param.start_point
                }
                if (["MEASUREMENT_TYPE_TEMPERATURE", "MEASUREMENT_TYPE_ATMOSPHERIC_PRESSURE"].indexOf(param.type) >= 0) {
                    value = (start_point + param.sample_offsets[index]) / 10;
                }
                else {
                    value = start_point + param.sample_offsets[index];
                }
                const timeDifference = measurementPeriod * index
                measurement_record.push(
                    {
                        measured_at: param.timestamp + timeDifference,
                        serial_number: Buffer.from(msg.payload.serial_num, 'base64').toString('hex').toUpperCase(),
                        battery_ok: msg.payload.battery_status,
                        transfer_reason,
                        type: param.type.replace("MEASUREMENT_TYPE_", ""),
                        value,
                    }
                );
            }
        }
    }
}

let channels_records = channels_record.reduce((acc, elem) => {
    acc[elem.type] = (acc[elem.type] || []).concat([elem])
    // (acc[elem.measured_at] ??= []).push(elem);
    // following may be used instead of the above line
    // acc[elem.date] = (acc[elem.date] || []).concat([elem])
    return acc;
}, {});

if (Object.keys(channels_records).length) {
    var pulse_payload = {
        payload: channels_records
    }
}
if (Object.keys(measurement_record).length) {
    var mearurement_payload = {
        payload: measurement_record
    }
}

return [pulse_payload, mearurement_payload];

